import React, { useState } from 'react';
import { ethers } from 'ethers';
import { CONFIG } from '../config/config';

export const WalletSigner: React.FC = () => {
  const [signing, setSigning] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [address, setAddress] = useState<string>('');

  const handleSign = async () => {
    try {
      setSigning(true);
      setError('');
      setSuccess('');

      if (!window.ethereum) {
        throw new Error('Please install MetaMask');
      }

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send('eth_requestAccounts', []);
      const signer = provider.getSigner();
      const userAddress = await signer.getAddress();
      setAddress(userAddress);
      
      // Check network
      const network = await provider.getNetwork();
      if (network.chainId !== parseInt(CONFIG.chainId)) {
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: '0x13881' }], // Mumbai
        });
      }
      
      const message = `Verify wallet ownership\nAddress: ${userAddress}\nTimestamp: ${Date.now()}`;
      const signature = await signer.signMessage(message);

      const response = await fetch(`${CONFIG.apiBaseUrl}/sign/log`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          address: userAddress, 
          message, 
          signature,
          timestamp: new Date().toISOString()
        })
      });

      if (!response.ok) throw new Error('Failed to log signature');

      setSuccess('Signature verified successfully! âœ…');
    } catch (err: any) {
      setError(err.message);
      setSuccess('');
    } finally {
      setSigning(false);
    }
  };

  return (
    <div className="wallet-signer-container">
      <button 
        onClick={handleSign} 
        disabled={signing}
        className={`sign-button ${signing ? 'loading' : ''}`}
      >
        {signing ? 'Signing...' : address ? 'Sign Message' : 'Connect Wallet'}
      </button>
      {address && (
        <p className="address-display">
          Connected: {address.slice(0, 6)}...{address.slice(-4)}
        </p>
      )}
      {error && <p className="error-message">{error}</p>}
      {success && <p className="success-message">{success}</p>}
    </div>
  );
};
