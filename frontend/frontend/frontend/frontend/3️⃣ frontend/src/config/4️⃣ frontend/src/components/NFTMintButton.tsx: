import React, { useState } from 'react';
import { ethers } from 'ethers';
import { CONFIG, NFT_ABI } from '../config/config';

export const NFTMintButton: React.FC = () => {
  const [minting, setMinting] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');

  const handleMint = async () => {
    try {
      setMinting(true);
      setError('');
      setSuccess('');

      if (!window.ethereum) {
        throw new Error('Please install MetaMask');
      }

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      
      // Request account access
      await provider.send('eth_requestAccounts', []);
      const signer = provider.getSigner();
      
      // Check network
      const network = await provider.getNetwork();
      if (network.chainId !== parseInt(CONFIG.chainId)) {
        // Switch to Mumbai network
        try {
          await window.ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: '0x13881' }], // Mumbai's chainId in hex
          });
        } catch (switchError: any) {
          // If Mumbai network is not added, add it
          if (switchError.code === 4902) {
            await window.ethereum.request({
              method: 'wallet_addEthereumChain',
              params: [CONFIG.networks.mumbai],
            });
          } else {
            throw switchError;
          }
        }
      }

      const contract = new ethers.Contract(
        CONFIG.nftContract,
        NFT_ABI,
        signer
      );

      const tx = await contract.mint();
      setSuccess('Minting in progress...');
      
      const receipt = await tx.wait();
      
      const transferEvent = receipt.events?.find(
        (event: any) => event.event === 'Transfer'
      );
      
      if (transferEvent) {
        const tokenId = transferEvent.args.tokenId.toString();
        setSuccess(`Successfully minted NFT #${tokenId}! ðŸŽ‰`);
        
        // Log mint to backend
        await fetch(`${CONFIG.apiBaseUrl}/nft/minted`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            wallet_address: await signer.getAddress(),
            token_id: tokenId,
            timestamp: new Date().toISOString()
          })
        });
      }
    } catch (err: any) {
      setError(err.message);
      setSuccess('');
    } finally {
      setMinting(false);
    }
  };

  return (
    <div className="mint-button-container">
      <button 
        onClick={handleMint} 
        disabled={minting}
        className={`mint-button ${minting ? 'loading' : ''}`}
      >
        {minting ? 'Minting...' : 'Mint NFT'}
      </button>
      {error && <p className="error-message">{error}</p>}
      {success && <p className="success-message">{success}</p>}
    </div>
  );
};
