from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional
import os
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

app = FastAPI(
    title="SweetAI NFT API",
    description="Backend API for NFT minting and signature verification",
    version="1.0.0"
)

# CORS 设置
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 在生产环境中应该设置具体的源
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 数据模型
class MintLog(BaseModel):
    wallet_address: str
    token_id: str
    timestamp: datetime
    tx_hash: Optional[str] = None

class SignatureLog(BaseModel):
    address: str
    message: str
    signature: str
    timestamp: datetime

# 内存存储（在生产环境中应该使用数据库）
mint_logs: List[MintLog] = []
signature_logs: List[SignatureLog] = []

# API 路由
@app.get("/")
async def root():
    return {
        "name": "SweetAI NFT API",
        "version": "1.0.0",
        "status": "running"
    }

@app.post("/nft/minted")
async def log_mint(mint_data: MintLog):
    try:
        mint_logs.append(mint_data)
        return {
            "status": "success",
            "message": "Mint logged successfully",
            "data": mint_data
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/nft/logs")
async def get_mint_logs():
    return {
        "status": "success",
        "count": len(mint_logs),
        "logs": mint_logs
    }

@app.post("/sign/log")
async def log_signature(sign_data: SignatureLog):
    try:
        signature_logs.append(sign_data)
        return {
            "status": "success",
            "message": "Signature logged successfully",
            "data": sign_data
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/sign/logs")
async def get_signature_logs():
    return {
        "status": "success",
        "count": len(signature_logs),
        "logs": signature_logs
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "mint_logs_count": len(mint_logs),
        "signature_logs_count": len(signature_logs)
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
