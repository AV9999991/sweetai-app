from fastapi import APIRouter, HTTPException
from typing import List
import logging
from ..models.mint_log import MintLog
from datetime import datetime

# 配置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

# 内存存储（生产环境应使用数据库）
mint_logs: List[MintLog] = []

@router.post("/nft/minted", response_model=dict)
async def log_mint(mint_data: MintLog):
    try:
        logger.info(f"Received mint log: {mint_data}")
        mint_logs.append(mint_data)
        return {
            "status": "success",
            "message": "Mint logged successfully",
            "data": mint_data
        }
    except Exception as e:
        logger.error(f"Error logging mint: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/nft/logs", response_model=dict)
async def get_mint_logs():
    try:
        return {
            "status": "success",
            "count": len(mint_logs),
            "logs": mint_logs
        }
    except Exception as e:
        logger.error(f"Error retrieving mint logs: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/nft/logs/{wallet_address}", response_model=dict)
async def get_wallet_mint_logs(wallet_address: str):
    try:
        wallet_logs = [log for log in mint_logs if log.wallet_address.lower() == wallet_address.lower()]
        return {
            "status": "success",
            "count": len(wallet_logs),
            "logs": wallet_logs
        }
    except Exception as e:
        logger.error(f"Error retrieving wallet mint logs: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
